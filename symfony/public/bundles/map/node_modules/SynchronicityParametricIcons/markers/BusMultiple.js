
import {ParametricIcon} from "/node_modules/parametric-icon/index.js"
import {template} from "../templates/BusMultiple.js"
import {abreviate} from "../marker_helper/abreviate.js"

/**
 * @extends ParametricIcon
 * @classdesc  Class for marker bus icon.
 *
 * 
 *
 * @class      BusMultiple
 *
 * @property   {string[]}        lines            Name of the lines. Serialized
 *                                                property, max 4 entry,
 *                                                additional entries will be
 *                                                removed.
 * @property   {string[]}        messages         Message displayed in the
 *                                                middle box. Serialized
 *                                                property, max 4 entry,
 *                                                additional entries will be
 *                                                removed.
 * @property   {Date[]}          departures       Serialized property, max 4
 *                                                entry, additional entries will
 *                                                be removed.
 * @property   {TemplateString}  text-hours       Serialized property
 * @property   {TemplateString}  text-minutes     Serialized property
 * @property   {TemplateString}  text-seconds     Serialized property
 * @property   {number}          [maxlength=10]   Max number of character in the
 *                                                siplayed name. Set to infinity
 *                                                to allway display everything.
 *                                                Serialized property
 * @property   {string}          [abreviations=]  path or name to the shorthands
 *                                                module to use.
 * @property   {boolean}         havemore         Icon show that there is to
 *                                                much data to display
 *                                                everything. Serialized
 *                                                property
 * @property   {string}          colorscheme      path or name of the colors
 *                                                scheme module to use. Use the
 *                                                lineColors and lineTextColors
 *                                                exports
 */
class BusMultiple extends ParametricIcon {

	constructor(){
		super()
    priv(this)
		
	}
  connectedCallback(){
    if(!this.ready) {
      if(!("text-hours" in this)){
        this["text-hours"] = "${time}H"
      }
      if(!("text-minutes" in this)){
        this["text-minutes"] = "${time}m"
      }
      if(!("text-seconds" in this)){
        this["text-seconds"] = "&#x1F68D;" // Oncoming Bus symbol (btoa cannot encode 🚍)
      }
      if(!("maxlength" in this)) {
        this.maxlength = 10
      }
      this.onMaxlength = this.onAbreviations = ()=>this.rerender()
    }
    this.setStyle(":host{display:block}")
    setupRefreshInterval.call(this)
    super.connectedCallback()
  }

  static get template () {
    return template
  }

	static get serialize(){
    
    let std = this.standardSerial

		let own =  {
			lines : 'array<string>',
			messages : 'array<string>',
      departures : 'array<Date>',
      "text-hours" : "template",
      "text-minutes" : "template",
      "text-seconds" : "template",
      maxlength : "number",
      havemore : "boolean",
      abreviations : {
        type:"module",
        cardinality:"one",
        externalsOwner : this,
        defaults:{}
      }
		}

    return Object.assign(std,own)
	}
	
	static get useColorScheme(){
		return true
	}

  static get imageParameters() {
    return ["stopname","havemore","lines","messages","departures"]
  }
	onLines(ol,nu){
		if(nu.length > 4){
			this.lines = nu.slice(0,4)
			this.havemore = true
			console.log("display max 4 lines")
		}
		else
			this.rerender()
	}
	onMessages(ol,nu){
		if(nu.length > 4){
			this.messages = nu.slice(0,4)
			this.havemore = true
			console.log("display max 4 messages")
		}
		else
			this.rerender()
	}
  onDepartures(ol,nu){
    if(nu.length > 4){
      this.departures = nu.slice(0,4)
      this.havemore = true
      console.log("display max 4 departures")
    }
    else
      this.rerender()
  }
  /**
   * 
   * @override
   */
	getInternalArgs(){
		let lineColors = this.lines.map(getLineColor.bind(this))
		let lineTextColors = this.lines.map(getLineTextColor.bind(this))
    let times = this.departures.map(d => delayString.call(this,d - Date.now()))
		let args = {lineColors, lineTextColors,times}

   
    args.stopname = abreviate(this.stopname ,this.maxlength, this.abreviations && this.abreviations.default)
    
    return args
	}

  destroy(){
    clearRefresh.call(this)
    super.destroy()
  }
}

const getLineColor = function(name) {
	
	return this.getColor("lineColor", name)
}

const getLineTextColor = function(name) {
	return this.getColor("lineTextColor", name) 
}

const delayString = function (deltaDate) {
  let t = Math.max(+deltaDate,0)
  const seconds = 1e3
  const minute = 60*seconds
  const hour = 60*minute
  let time,template
  if(t > hour) {
    time = t/hour
    template = "text-hours"
  }else if(t>minute){
    time = t/minute
    template = "text-minutes"
  }else {
    time = t/seconds
    template = "text-seconds"
  }
  time = Math.round(time)

  return this[template]({time})
}

const clearRefresh = function(){
  clearInterval(_(this).refreshInterval)
}

const setupRefreshInterval = function(){
  clearRefresh.call(this)
  _(this).refreshInterval = setInterval(()=>this.rerender(), 30e3)
}


// Private values. Weakmap key and value can be GCed if they are not stored anywhere else.
// Acces any private field using _(this).anyOfyourPrivateField
{
  let map = new WeakMap()

  var priv = function(key) {
    map.set(key,{})
  }

  var _ = function(key) {
    return map.get(key)
  }
}

export default BusMultiple