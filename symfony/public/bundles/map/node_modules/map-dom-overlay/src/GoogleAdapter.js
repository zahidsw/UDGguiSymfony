/**
 * @classdesc  Adapter from maps of the google api.
 *
 * Wrap the OverlayView interface from google to match a the {@link
 * MapAdapter} interface.
 *
 * @class      GoogleAdapter
 *
 * @augments {MapDomOverlay~MapAdapter}
 *
 * @augments   {external:google.maps.OverlayView}
 * 
 * 
 *
 * @param      {MapComponent}   mapComponent  The map component hosting
 *                                            domOverlay
 * @param      {MapDomOverlay}  domOverlay    The dom overlay this adapter
 *                                            is destined to.
 *
 */
class GoogleAdapter {
	
	
	constructor(mapComponent,domOverlay) {
		
		let google = window["google"]


		
		priv(this)

		_(this).mapComponent = mapComponent
		_(this).map = mapComponent.adapter.mapObject
		_(this).ownIndex = adapterCount++;

		let base = google.maps.OverlayView

		for (var property in base.prototype) {
	      this[property] = base.prototype[property].bind(this)
	    }

	    _(this).slotName = createSlot.call(this,mapComponent,domOverlay)

	   	updateOffset.call(this)

	   	_(this).onWindowResize = updateOffset.bind(this)
	   	window.addEventListener("resize", _(this).onWindowResize)
	}

	
// ****************************************************************************
// *                          MapAdapter Interface                            *
// ****************************************************************************
	
	/**
	 * The name of the slot created for the MapDomOverlay
	 *
	 * @type  { String }
	 */
	get slotName(){
		return _(this).slotName
	}

// ****************************************************************************
// *                      Google's OverlayView interface                      *
// ****************************************************************************

	onAdd() {
		let div = document.createElement("div")


		let slot = document.createElement("slot")
		div.id = _(this).slotName;
		slot.name = _(this).slotName
		var panes = this.getPanes()
  		panes.overlayMouseTarget.appendChild(div)
  		div.appendChild(slot)

  		_(this).map.addListener("idle",()=>this.onIdle())
	}

	onIdle(){
		_(this).domOverlay.place()
	}

	draw(){

	}
	onRemove(){
		
		_(this).onOverlayDestroyed()

		_(this).domOverlay.remove()
		_(this).domOverlay.destroy()
		_(this).slot.remove()
		_(this).domOverlay = null
		_(this).mapComponent.setStyle("",_(this).slotName)
		window.removeEventListener("resize", _(this).onWindowResize)


	}

	destroy() {
		this.onRemove()
	}


	
}


// ****************************************************************************
// *                              Additional Doc                              *
// ****************************************************************************

/**
 * Required only if you use Google's maps and a GoogleAdapter
 * 
 * @external google.maps
 */

 /**
  * @name external:google.maps.OverlayView
  * 
  * @class
  * A class you can implement if you want to display custom types of overlay objects on the map.
  * 
  * @see {@link https://developers.google.com/maps/documentation/javascript/reference/overlay-view}
  */
  /**
  * @name external:google.maps.Map
  * 
  * @class
  * The map class of google map js api.
  * 
  * @see {@link https://developers.google.com/maps/documentation/javascript/reference/map}
  */

// ****************************************************************************
// *                                  Private                                 *
// ****************************************************************************

/**
 * Creates a named slot html tag inside the map object. The dom overlay will
 * use the slot to render itself.
 * 
 * @private
 * 
 * @param      {MapComponent}     mapComponent  The map component
 * @param      {MapDomOverlay}    domOverlay    The dom overlay
 * 
 * @return {string} The name of the slot created for this overlay.
 */
var createSlot = function (mapComponent,domOverlay){
	let slotName = "domOverlay_google"+_(this).ownIndex

	this.setMap(_(this).map)
	_(this).domOverlay = domOverlay

	return slotName
}


function updateOffset() {
	let mapComponent = _(this).mapComponent
	let mapBox = mapComponent.getBox()
    mapComponent.setStyle(
	    	`#${_(this).slotName}{left:-${mapBox.width/2}px;top:-${mapBox.height/2}px; position: relative}`,_(this).slotName)
}

var adapterCount = 0

// Private values. Weakmap key and value can be GCed if they are not stored anywhere else.
// Acces any private field using _(this).anyOfyourPrivateField
{
	let map = new WeakMap()

	var priv = function(key) {
		let args = {}
		map.set(key,args)
		return args
	}

	var _ = function(key) {
		return map.get(key)
	}
}

export default GoogleAdapter