/**
 * @module DomOverlayAddon
 * 
 * @desc
 * No more a feature add-on module for map component
 */

import GoogleAdapter from "./GoogleAdapter.js"
import MapDomOverlay from "./MapDomOverlay.js"

export const nameSpace = "domOverlay"

export function create(adapter,mapComponent,mapObject) {
	let priv = defPriv(mapComponent)
	let pub = {}

	_(mapComponent).mapObject = mapObject



	Object.defineProperty(pub, "Adapter", {
		value : getAddapterClass(mapComponent),
		writable : false
	})

	return mapComponent[nameSpace] = pub

}



/**
 * A collection of MapAdapter. If working on map library other that the default
 * ones, it will be required to add new MapDomOverlay~MapAdapter to this object.
 * 
 * The key of this object match the poweredby attribute of the map-component.
 *
 * @type       {Object.<string,MapDomOverlay~MapAdapter>}
 * 
 * @example <caption>Enabling dom overlay on Map Box</caption>
 * import {domAdapters} from "map-dom-overlay.min.js"
 * 
 * domAdapters.mapbox = new class {
 * 	constructor(mapComponent,domOverlay){
 * 		//construct
 * 		...
 * 	}
 * 	
 * 	get soltName(){
 * 		// return the slot name
 * 		...
 * 	}
 * }
 */
export const domAdapters = {}

// ****************************************************************************
// *                              Add-on Private                              *
// ****************************************************************************




export function getAddapterClass(mapComponent) {
	
	let engine = mapComponent.poweredby

	let Adapter = domAdapters[engine] || defaultAdapter[engine]
	
	if(!Adapter)
		throw new Error("There is no dom overlay apter adapter for map-component running with"+mapComponent.poweredBy)
	return Adapter
}

// ****************************************************************************
// *                                 Privates                                 *
// ****************************************************************************

const defaultAdapter = {
	"google" : GoogleAdapter
}
// Private values. Weakmap key and value can be GCed if they are not stored anywhere else.
// Acces any private field using _(this).anyOfyourPrivateField
{
	let map = new WeakMap()

	var defPriv = function(key) {
		let args = {}
		map.set(key,args)
		return args
	}

	var _ = function(key) {
		return map.get(key)
	}
}
