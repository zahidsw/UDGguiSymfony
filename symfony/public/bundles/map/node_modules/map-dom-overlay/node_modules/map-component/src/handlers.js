// Generated automatically by nearley, version 2.16.0
// http://github.com/Hardmath123/nearley
function id(x) { return x[0]; }
let Lexer = undefined;
let ParserRules = [
    {"name": "main", "symbols": ["ws", "eventhandlers", "ws"], "postprocess": function(d){ return d[1] }},
    {"name": "eventhandlers$ebnf$1", "symbols": ["eventhanlderstail"], "postprocess": id},
    {"name": "eventhandlers$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "eventhandlers", "symbols": ["eventhandler", "eventhandlers$ebnf$1"], "postprocess": function(d){ return d[1] ? [d[0]].concat(d[1]) : [d[0]] }},
    {"name": "eventhanlderstail$ebnf$1$subexpression$1", "symbols": ["sep", "eventhandler"]},
    {"name": "eventhanlderstail$ebnf$1", "symbols": ["eventhanlderstail$ebnf$1$subexpression$1"]},
    {"name": "eventhanlderstail$ebnf$1$subexpression$2", "symbols": ["sep", "eventhandler"]},
    {"name": "eventhanlderstail$ebnf$1", "symbols": ["eventhanlderstail$ebnf$1", "eventhanlderstail$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "eventhanlderstail", "symbols": ["eventhanlderstail$ebnf$1"], "postprocess": function(d){ return d[0].map(pair => pair[1]) }},
    {"name": "eventhandler", "symbols": ["name", "_", {"literal":":"}, "_", "handler"], "postprocess": function(d){ d[4].event = d[0]; return d[4] }},
    {"name": "handler$string$1", "symbols": [{"literal":"-"}, {"literal":">"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "handler", "symbols": ["pointer", "_", "handler$string$1", "_", "snippet"], "postprocess": function(d){ return{pointer:d[0][0], snippet:d[4][0]} }},
    {"name": "snippet$subexpression$1", "symbols": ["assignsnippet"]},
    {"name": "snippet$subexpression$1", "symbols": ["callsnippet"]},
    {"name": "snippet", "symbols": ["snippet$subexpression$1"], "postprocess": function(d){ return d[0] }},
    {"name": "assignsnippet", "symbols": ["simplepath", "_", {"literal":"="}, "_", "onearg"], "postprocess": function(d){ return{type:"assign", path:d[0], args:d[4]} }},
    {"name": "callsnippet$ebnf$1", "symbols": ["args"], "postprocess": id},
    {"name": "callsnippet$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "callsnippet", "symbols": ["simplepath", "_", {"literal":"("}, "_", "callsnippet$ebnf$1", "_", {"literal":")"}], "postprocess": function(d){ return{type:"call", path:d[0], args:d[4] || []} }},
    {"name": "pointer", "symbols": ["thisselector"]},
    {"name": "pointer", "symbols": ["windowselector"]},
    {"name": "pointer", "symbols": ["query"]},
    {"name": "thisselector$ebnf$1$subexpression$1", "symbols": ["thissubselector"]},
    {"name": "thisselector$ebnf$1", "symbols": ["thisselector$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "thisselector$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "thisselector", "symbols": ["this", "thisselector$ebnf$1"], "postprocess": function(d){ return {type : "this",query:d[1] && d[1][0]} }},
    {"name": "windowselector$string$1", "symbols": [{"literal":"w"}, {"literal":"i"}, {"literal":"n"}, {"literal":"d"}, {"literal":"o"}, {"literal":"w"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "windowselector", "symbols": ["windowselector$string$1"], "postprocess": function(d){ return {type : "window"} }},
    {"name": "thissubselector", "symbols": [{"literal":"("}, "_", "query", "_", {"literal":")"}], "postprocess": function(d){ return d[2].query }},
    {"name": "this$string$1", "symbols": [{"literal":"t"}, {"literal":"h"}, {"literal":"i"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "this", "symbols": ["this$string$1"], "postprocess": function(d){ return {type : "this"} }},
    {"name": "query$ebnf$1", "symbols": []},
    {"name": "query$ebnf$1", "symbols": ["query$ebnf$1", /[^>]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "query", "symbols": [/[^\s]/, "query$ebnf$1"], "postprocess":  function(d, location, reject){
        
            var q = d[0]+d[1].join("")
            
            if(q === "this" || q === "window")
                return reject
        
            return {type : "query", query: d[0]+d[1].join("")} 
        } },
    {"name": "args$ebnf$1$subexpression$1", "symbols": ["argtail"]},
    {"name": "args$ebnf$1", "symbols": ["args$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "args$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "args", "symbols": ["onearg", "_", "args$ebnf$1"], "postprocess": function(d){return d[2] ? [d[0]].concat(d[2][0]) : [d[0]]}},
    {"name": "argtail$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "_", "onearg"]},
    {"name": "argtail$ebnf$1", "symbols": ["argtail$ebnf$1$subexpression$1"]},
    {"name": "argtail$ebnf$1$subexpression$2", "symbols": [{"literal":","}, "_", "onearg"]},
    {"name": "argtail$ebnf$1", "symbols": ["argtail$ebnf$1", "argtail$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "argtail", "symbols": ["argtail$ebnf$1"], "postprocess": function(d){return d[0].map(triple=> triple[2])}},
    {"name": "onearg$subexpression$1", "symbols": ["thispath"]},
    {"name": "onearg$subexpression$1", "symbols": ["pointedpath"]},
    {"name": "onearg$subexpression$1", "symbols": ["detailpath"]},
    {"name": "onearg$subexpression$1", "symbols": ["staticvalue"]},
    {"name": "onearg$subexpression$1", "symbols": ["eventpath"]},
    {"name": "onearg", "symbols": ["onearg$subexpression$1"], "postprocess": function(d){ return d[0][0] }},
    {"name": "thispath$ebnf$1", "symbols": ["pathtrail"], "postprocess": id},
    {"name": "thispath$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "thispath", "symbols": ["this", "thispath$ebnf$1"], "postprocess": function(d){ return {owner: "this", path:d[1] || ""} }},
    {"name": "pointedpath$string$1", "symbols": [{"literal":"p"}, {"literal":"o"}, {"literal":"i"}, {"literal":"n"}, {"literal":"t"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "pointedpath$ebnf$1", "symbols": ["pathtrail"], "postprocess": id},
    {"name": "pointedpath$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "pointedpath", "symbols": ["pointedpath$string$1", "pointedpath$ebnf$1"], "postprocess": function(d){ return {owner: "pointed", path:d[1] || ""} }},
    {"name": "eventpath$string$1", "symbols": [{"literal":"e"}, {"literal":"v"}, {"literal":"e"}, {"literal":"n"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "eventpath$ebnf$1", "symbols": ["pathtrail"], "postprocess": id},
    {"name": "eventpath$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "eventpath", "symbols": ["eventpath$string$1", "eventpath$ebnf$1"], "postprocess": function(d){ return {owner: "event",path:d[1] || "" }}},
    {"name": "detailpath$ebnf$1", "symbols": ["pathtrail"], "postprocess": id},
    {"name": "detailpath$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "detailpath", "symbols": ["name", "detailpath$ebnf$1"], "postprocess":  function(d, location, reject){ 
        if(d[0] === "event" || d[0] === "this")
        	return reject
        return {owner: "event.detail.", path:d[0]+(d[1]||"")} } 
        },
    {"name": "pathtrail$ebnf$1", "symbols": []},
    {"name": "pathtrail$ebnf$1", "symbols": ["pathtrail$ebnf$1", /[^\n\r+\-*^,;&|=><:\(\)\{\}]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "pathtrail", "symbols": [/[.\[]/, "pathtrail$ebnf$1"], "postprocess": function(d){ return d[0]+d[1].join("") }},
    {"name": "staticvalue$subexpression$1", "symbols": ["jsonfloat"]},
    {"name": "staticvalue$subexpression$1", "symbols": ["jsonstring"]},
    {"name": "staticvalue", "symbols": ["staticvalue$subexpression$1"], "postprocess": function(d){ return {owner: "", path:d[0]} }},
    {"name": "simplepath$ebnf$1", "symbols": ["pathtrail"], "postprocess": id},
    {"name": "simplepath$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "simplepath", "symbols": ["name", "simplepath$ebnf$1"], "postprocess": function(d){ return d[1] ? d[0]+d[1] : d[0]}},
    {"name": "name$ebnf$1", "symbols": []},
    {"name": "name$ebnf$1", "symbols": ["name$ebnf$1", /[^\s.,;+\-*^&|=><:\(\)\[\]\{\}]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "name", "symbols": [/[a-zA-Z\$_\\]/, "name$ebnf$1"], "postprocess": function(d){return d[0]+d[1].join("")}},
    {"name": "jsonfloat$ebnf$1", "symbols": [{"literal":"-"}], "postprocess": id},
    {"name": "jsonfloat$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "jsonfloat$ebnf$2", "symbols": [/[0-9]/]},
    {"name": "jsonfloat$ebnf$2", "symbols": ["jsonfloat$ebnf$2", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "jsonfloat$ebnf$3$subexpression$1$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "jsonfloat$ebnf$3$subexpression$1$ebnf$1", "symbols": ["jsonfloat$ebnf$3$subexpression$1$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "jsonfloat$ebnf$3$subexpression$1", "symbols": [{"literal":"."}, "jsonfloat$ebnf$3$subexpression$1$ebnf$1"]},
    {"name": "jsonfloat$ebnf$3", "symbols": ["jsonfloat$ebnf$3$subexpression$1"], "postprocess": id},
    {"name": "jsonfloat$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "jsonfloat$ebnf$4$subexpression$1$ebnf$1", "symbols": [/[+-]/], "postprocess": id},
    {"name": "jsonfloat$ebnf$4$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "jsonfloat$ebnf$4$subexpression$1$ebnf$2", "symbols": [/[0-9]/]},
    {"name": "jsonfloat$ebnf$4$subexpression$1$ebnf$2", "symbols": ["jsonfloat$ebnf$4$subexpression$1$ebnf$2", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "jsonfloat$ebnf$4$subexpression$1", "symbols": [/[eE]/, "jsonfloat$ebnf$4$subexpression$1$ebnf$1", "jsonfloat$ebnf$4$subexpression$1$ebnf$2"]},
    {"name": "jsonfloat$ebnf$4", "symbols": ["jsonfloat$ebnf$4$subexpression$1"], "postprocess": id},
    {"name": "jsonfloat$ebnf$4", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "jsonfloat", "symbols": ["jsonfloat$ebnf$1", "jsonfloat$ebnf$2", "jsonfloat$ebnf$3", "jsonfloat$ebnf$4"], "postprocess": 
        function(d) {
            return parseFloat(
                (d[0] || "") +
                d[1].join("") +
                (d[2] ? "."+d[2][1].join("") : "") +
                (d[3] ? "e" + (d[3][1] || "+") + d[3][2].join("") : "")
            );
        }
        },
    {"name": "jsonstring$ebnf$1", "symbols": []},
    {"name": "jsonstring$ebnf$1$subexpression$1", "symbols": [{"literal":"\\"}, /['bfnrt\/\\]/]},
    {"name": "jsonstring$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"\\"}, {"literal":"u"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "jsonstring$ebnf$1$subexpression$1", "symbols": ["jsonstring$ebnf$1$subexpression$1$string$1", "hex4"]},
    {"name": "jsonstring$ebnf$1$subexpression$1", "symbols": [/[^'\\]/]},
    {"name": "jsonstring$ebnf$1", "symbols": ["jsonstring$ebnf$1", "jsonstring$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "jsonstring", "symbols": [{"literal":"'"}, "jsonstring$ebnf$1", {"literal":"'"}], "postprocess": function(d){return '"'+d[1].join("")+'"'}},
    {"name": "hex4", "symbols": ["hex1", "hex1", "hex1", "hex1"], "postprocess": function(d){return d.join("")}},
    {"name": "hex1", "symbols": [/[a-fA-F0-9]/], "postprocess": function(d){return d[0]}},
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", /[ \t]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"]},
    {"name": "sep$ebnf$1", "symbols": [/[\n;]/]},
    {"name": "sep$ebnf$1", "symbols": ["sep$ebnf$1", /[\n;]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "sep", "symbols": ["_", "sep$ebnf$1", "_"]},
    {"name": "ws$ebnf$1", "symbols": []},
    {"name": "ws$ebnf$1", "symbols": ["ws$ebnf$1", /[\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "ws", "symbols": ["ws$ebnf$1"]}
];
let ParserStart = "main";
export default { Lexer, ParserRules, ParserStart };
