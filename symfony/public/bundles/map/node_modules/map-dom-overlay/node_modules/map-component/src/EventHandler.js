import HandlerParser from "./HandlerParser.js"


class EventHandler {
	constructor(owner){
		
		priv(this)
		
		_(this).onEvent = onEvent.bind(this)
		_(this).handlers = []
		_(this).owner =  owner

		this.scope = document

		
	}

	clear(){
		

		let {handlers} = _(this)

		for(let evtType of handlers){
			handlers.destroy()
		}

		_(this).handlers = []
	}
	
	setCode(strCode){
		
		let parser = new HandlerParser()

		parser.feed(strCode)

		let parsedHandlers = parser.finish()
		
		this.setHandlers(parsedHandlers[0])
	}

	setHandlers(parsedHandlers){
		parsedHandlers.forEach(h => this.pushHanlder(h))
	}

	pushHanlder(parsedHandler) {
		let {pointer, snippet, event } = parsedHandler 
		let sig = signature(event,pointer)
		let handlers = _(this).handlers
		let handler = handlers.find(h=>h.signature === sig)

		if(!handler){
			handler = new Handler(_(this).owner,event)
			handler.setPointer(pointer)
		}

		handler.snippets.push(snippet)
		handler.build()
		handlers.push(handler)

	}

	toString(){
		if(!_(this).handlers)
			return ""

		return _(this).handlers.join("; ")
	}

	

	destroy(){
		this.clear()
	}
}



// ****************************************************************************
// *                              Private Static                              *
// ****************************************************************************

const initTarget = "var target = event.target"
 
class Handler{
	constructor(owner, evt){

		this.invoke = ()=>{}
		this.snippets = []
		this.select = ()=>null
		this.evt = evt
		this.owner = owner
		

	}

	updateSignature(pointer){
		this.signature = signature(this.evt,pointer)
	}
	
	build(){
		
		let owner = this.owner

		let lines = ['"use strict"',initTarget].concat(this.snippets.map(makeSnippet))
		this.invoke = new Function("event","pointed", lines.join(";\n")).bind(owner)

		
	}

	setPointer( parsedPointer){
		
		let owner = this.owner
		let {type , query} = parsedPointer

		if(type === "this"){
			this.select = query
				? ()=> owner.querySelectorAll(query)
				: ()=> [owner]
		}
		else if(type === "query") {
			this.select = ()=> document.querySelectorAll(query)
		}
		else if(type === "window") {
			this.select = ()=> [window]
		}
		else {
			throw new Error("Unknown pointer type "+type+" (this is probably an issue withe the grammar definition) ")
		}
		this.updateSignature(parsedPointer)
		this.enable()
	}

	enable(){
		if(this.callback)
			return

		this.callback = handlerCallback.bind(this)

		this.owner.addEventListener(this.evt,this.callback)
	}
	destroy(){
		this.owner.removeEventListener(this.evt,this.callback)
	}
	toString(){
		return this.selector+"-> "+this.signature
	}
}

var handlerCallback = function(evt) {

	let selected = this.select()

	for(let pointed of selected){
		try{
			this.invoke(evt,pointed)
		}catch(e){
			console.error(e)
		}
		
	}


}

Handler.fromString = function(str) {

	let [
		match ,
		selector ,
		methode ,
		parameters
	] = /(.+)->([^\(]+)\(([^\)]*)\)/g.exec(str)

	if(!match || !selector || !methode){
		throw new Error("could not parse "+str+" to a targeted event.")
	}
		

	return new Handler(selector,methode,parameters)
}

var pointerSignature = function(pointer){
	let {type , query} = pointer
		if(type === "this"){
			return "this"
		}
		else if(type === "query") {
			return pointer.query.trim().replace(/\s+/g," ")
		}
}

var makeSnippet = function (parsedSnippet) {

	let {type, path, args} = parsedSnippet

	if(type ==="call")
		return `pointed.${path}(${args.map(makeSnippetArg).join(",")})`
	else 
		return `pointed.${path}=${args.owner+args.path}`

}

var toHandlerSiganture = function(pointer,snippet) {
	
	return pointer.trim()+"->"+snippet.trim()

}
var makeSnippetArg = function(parsedArg){
	
	let {owner, path} = parsedArg

	return owner+path
}

var signature = function(evt,pointer) {

	return evt.trim()+":"+ pointerSignature(pointer)
}


// ****************************************************************************
// *                                  Private                                 *
// ****************************************************************************

var onEvent = function(evt) {

	let {handlers} = _(this)
	
	for(let i = 0;i < handlers.length; i++){

		let {selector, methode, paramExtractor} = handlers[i]

		dispatchOne.call(this, evt, selector, methode, paramExtractor)
	}
}


var dispatchOne = function(event,selector,methode,paramExtractor ) {

	
	for(let target of this.scope.querySelectorAll(selector)){
		try{
			target[methode].apply(target,paramExtractor.call(target,event,event.detail))
		}catch(e){
			console.error(e)
		}
	}
	
}

// Private values. Weakmap key and value can be GCed if they are not stored anywhere else.
{
	let map = new WeakMap()

	var priv = function(key) {
		map.set(key,{})
	}

	var _ = function(key) {
		return map.get(key)
	}
}

export default EventHandler