/**
 * @classdesc
 * 
 * Base class to wrap the interfaces provided by a few map solution in a common interface.
 * 
 * Mostly exist as support for documentation 
 *
 * @class MapAdapter 
 * 
 */
class MapAdapter {

	
	constructor(mapComponent){

	}

	/**
	 * Sets the center center of the view port.
	 *
	 * @param      {MapAdapter~LatLng}  latLngCenter  The coordinate of the center 
	 * 
	 * @abstract
	 */
	setCenter(latLngCenter) {
		noImpl(this,"setCenter")
	}

	/**
	 * Return the coordinate of the point at the center of the map.
	 *
	 * 
	 * @abstract
	 * 
	 * @return {MapAdapter~LatLng} The coordinate of the point at the center of the map.
	 */
	getCenter() {
		noImpl(this,"getCenter")
	}

	/**
	 * Sets the zoom on the map
	 * @abstract
	 * @param      {number}  z       The amount of zoom of the map, should be approximately as [open street map zoom levels](https://wiki.openstreetmap.org/wiki/Zoom_levels) 
	 */
	setZoom(z) {
		noImpl(this,"setZoom")
	}

	/**
	 * Gets the zoom.
	 * @abstract
	 * @return {number} The zoom
	 */
	getZoom(){
		noImpl(this,"getZoom")
	}

	/**
	 * 
	 * @typedef {string} MapAdapter~StandardEventType
	 * 
	 * A standardized way to designate event across library. Can take the following values
	 * 
	 * #### map_drag
	 * Event fired when the map center position is changed by user interaction (and not programmaticaly) through mean provided by the library, 
	 * such as by dragging the map. 
	 * 
	 * This event should **not** be fired when the map center is modified through setCenter of the adapter.
	 * 
	 * #### map_dragend
	 * Event fired when the map center position have changed by user through mean provided by the library,
	 * but that the user action causing this change have stopped.
	 * 
	 * This event should **not** be fired when the map center is modified through setCenter of the adapter.
	 * 
	 * #### map_dragstart
	 * Event fired when the user start interacting with the map in way that change the center position.
	 * 
	 * This event should **not** be fired when the map center is modified through setCenter of the adapter.
	 * 
	 * #### map_idle
	 * 
	 * This event is fired when the map becomes idle after panning or zooming.
	 * 
	 * #### map_user_zoom
	 * 
	 * The user changed the zoom  by user interaction (and not programmaticaly) through mean provided by the library, 
	 * such as by dragging the map
	 */


	/**
	 * Bind a event listener to the equivalent of the standard event type in the
	 * map. This method is called to create bridge between inner event and outer
	 * event. When implementing this method, developer can assume that this
	 * method is called at most once for any given eventStandardName since the
	 * creation of the object or since the last call to removeMapEvent with the
	 * same eventStandardName. (ie. with this method, anevent will be bound to a
	 * unique callback)
	 *
	 * @param      {MapAdapter~StandardEventType}  eventStandardName  The event standard name
	 * @param      {Function(Event)}               callback           The
	 *                                                                callback
	 *                                                                handling
	 *                                                                the event.
	 *                                                                Expect
	 *                                                                either a
	 *                                                                [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent)
	 *                                                                or a
	 *                                                                standard
	 *                                                                dom event.
	 *
	 * @abstract
	 */
	addMapEvent(eventStandardName,callback) {
		noImpl(this,"addMapEvent")
	}

	/**
	 * Removes a map event.
	 *
	 * @param      {MapAdapter~StandardEventType}  eventStandardName  The event
	 *                                                                standard
	 *                                                                name under
	 *                                                                which the
	 *                                                                callback
	 *                                                                was
	 *                                                                registered.
	 * @param      {Function}                      callback           The
	 *                                                                function
	 *                                                                to remove
	 *
	 * @abstract
	 */
	removeMapEvent(eventStandardName,callback) {
		noImpl(this,"addMapEvent")
	}

	/**
	 * Convert the coordinate of a point in the world to pixel coordinate inside
	 * the MapComponent. Can also specify a reference location and a zoom do do the transformation.
	 * If omitted use the one of the map.
	 *
	 * @abstract
	 *
	 * @param      {MapComponent~LatLng}  latLng  The location in world space.
	 * @param      {MapComponent~LatLng}  [center]  The reference location of the map.
	 *                                              Use the current location of the map
	 *                                              if omitted.
	 * @param      {number}               [zoom]    The reference zoom of the map.  Use
	 *                                              the current zoom of the map if
	 *                                              omitted.
	 */
	latLngToComponentPx(latLng){
		noImpl(this,"latLngToComponentPx")
	}

	/**
	 * Convert the coordinate of a point on the screen inside the MapComponent to a location in the world.
	 * 
	 *
	 * @param      {MapComponent~PxCoord}  px    The location in screen space.
	 * 
	 * @return {MapComponent~LatLng}  
	 */
	componentPxToLatLng(px){
		noImpl(this,"latLngToComponentPx")
	}

	/**
	 * The object representing the map in the logic of the adapted library.
	 * 
	 * @type {*}
	 */
	get mapObject(){
		noImpl(this,"get mapObject")
	}
}

var noImpl = function(base,meth) {
	throw new Error("No implementation of method "+meth+" in adapter class "+base.constructor.name)
}



export default MapAdapter