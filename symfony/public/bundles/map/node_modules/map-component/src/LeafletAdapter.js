import TimedSwitch from "./TimedSwitch.js"

/**
 * @module LeafletAdapter
 *
 * A map adapter using Leaflet and by default openstreetmap tiles to render a map.
 */

/**
 * 
 * @override
 */
export function createAdapter (mapComponent,featureModules){
	return new LeafletAdapter(mapComponent)
}

/**
 * @override
 */
export async function createMap(adapter,mapComponent,featureModules) {

	await loadStyle(mapComponent)

	await loadLib(mapComponent)
	
	let mapDiv = document.createElement("div")
	mapDiv.id = "mapContainer"
	mapComponent.shadowRoot.append(mapDiv)

	return initMap(mapDiv,adapter,mapComponent)
	
}

/**
 * 
 * @override
 * @type {string}
 */
export const enabling = "leaflet"

class LeafletAdapter {
	constructor(mapComponent){
		priv(this)
		_(this).mapComponent = mapComponent
		_(this).handlers = {}


	}

	/**
	 * @override
	 */
	setCenter(latLngCenter,olds) {
		let toNan = isNaN(latLngCenter.latitude+latLngCenter.longitude)
		let fromNan = !olds || isNaN(olds.latitude+olds.longitude)

		// We cannot want to go to NaN.
		if(toNan)
			return
		
		let latLng = toLatLng(latLngCenter)

		_(this).canBeUser = false 
		

		let opt = fromNan ? {noMoveStart:true} : {animate:true,noMoveStart:true}
		_(this).map.panTo(latLng,opt)
		
	
		
	}

	/**
	 * @override
	 */
	getCenter(){
		let c = _(this).map.getCenter()

		return {latitude:c.lat, longitude: c.lng}
	}

	/**
	 * @override
	 */
	setZoom(z) {
		_(this).canBeUser = false 
		_(this).isAutoZoom = true 
		_(this).map.setZoom(z,{noMoveStart:true})
	}

	/**
	 * @override
	 */
	getZoom(){
		return _(this).map.getZoom()
	}

	/**
	 * @override
	 */
	addMapEvent(eventStandardName,callback) {
		
		let that = this

		let handler = userEvent.has(eventStandardName) ? 
			function(evt){
				if(_(that).canBeUser && !(_(that).isAutoZoom)){
					callback.call(this,evt)
				}
			} : 
			callback

		_(this).handlers[eventStandardName] = handler
		_(this).map.on(eventTranslationTable[eventStandardName], handler)
	}

	/**
	 * @override
	 */
	removeMapEvent(eventStandardName,callback) {
		let leafletName = eventTranslationTable[eventStandardName]
		let handler = _(this).handlers[eventStandardName] 
		_(this).map.off(leafletName, handler)
		delete _(this).handlers[eventStandardName] 
	}

	/**
	 * @override
	 */
	latLngToComponentPx(latLng,opt_centerref,opt_zoomref){
		let latlng = toLatLng(latLng)

		let map = _(this).map

		if(arguments.length === 1){
			return map.latLngToContainerPoint(latlng)
		}

		let zoom = arguments.length > 2 ? opt_zoomref : this.getZoom()
	
		var bounds = _(this).map.getBounds();

		var ref = map.project(
			arguments.length > 1 ?
			
				toLatLng(opt_centerref) :

				L.LatLng(
					bounds.getNorth(),
					bounds.getWest()
				)
			,
			zoom
		)


		var point = map.project(latlng,zoom);

		let x = (point.x - ref.x) 
		let y = (point.y - ref.y) 
	
		if(arguments.length > 1 ){
			let box = _(this).mapComponent.getBox()
			x += box.width / 2
			y += box.height / 2
		}
		return L.Point(
			Math.floor(x),
			Math.floor(y)
		);
	}

	/**
	 * @override
	 */
	componentPxToLatLng(px){
		
		let map = _(this).map

		let {lat,lng} =  map.containerPointToLatLng(px)
		return {latitude:lat,longitude:lng}
	}

	/**
	 * @override
	 * 
	 */
	get mapObject(){
		return _(this).map
	}
}

// ****************************************************************************
// *                                 Privates                                 *
// ****************************************************************************

const eventTranslationTable = {
	"map_drag" : "move",
	"map_dragend" : "moveend",
	"map_dragstart" : "movestart",
	"map_idle" : "load moveend viewreset zoomend",
	"map_zoom" : "zoom",
	"map_user_zoom" : "zoom"
}

const userEvent = new Set(["map_drag" , "map_dragend", "map_dragstart","map_user_zoom"])

var loadStyle = function(mapComponent){
	let styleLink = mapComponent.getAttribute("leaflet-style") || DEFAULT_STYLE_URL

	let style = mapComponent.setStyle(styleLink,"leaflet")

	let styleChecksum = mapComponent.getAttribute("style-integrity") || DEFAULT_STYLE_CHECK
	style.setAttribute("integrity",styleChecksum)
	
	style.setAttribute("crossorigin","")

	return new Promise(res => style.addEventListener("load", res))
}

var loadLib = function(mapComponent){
	if(! ("L" in window)) {
		let script = document.createElement("script")
		
		let scriptChecksum = mapComponent.getAttribute("script-integrity") || DEFAULT_LIB_CHECK
		
		script.setAttribute("integrity",scriptChecksum)
		script.setAttribute("crossorigin","")

		let done = new Promise(res => script.addEventListener("load", res))

		script.src = mapComponent.getAttribute("leaflet-src") || DEFAULT_LIB_URL

		document.head.append(script)

		return done
	}

	return Promise.resolve()
}

var initMap = async function(mapDiv, adapter,mapComponent){

	let map = L.map(mapDiv)

	let done = new Promise(res => map.whenReady(res))

	let tileLayer = mapComponent.getAttribute("tiles-src") || DEFAULT_TILE_URL
	let attribution = mapComponent.getAttribute("tiles-attribution") || tileLayer === DEFAULT_TILE_URL && DEFAULT_TILE_ATTRIBUTION

	let layer = attribution ?
		L.tileLayer(tileLayer, {attribution}) : 
		L.tileLayer(tileLayer)
	layer.addTo(map)

	_(adapter).map = map

	let p0 = mapComponent.location

	_(adapter).discardEvent = true
	map.setView([p0.latitude, p0.longitude], mapComponent.zoom)
	_(adapter).discardEvent = false

	setupIsUserCheck.call(adapter)
	
	await done

	return map
}
var toLatLng = function(componentLocation) {
	
	let {latitude, longitude} = componentLocation

	return L.latLng(+latitude, +longitude)
}

var setupIsUserCheck = function () {
	let mapObj = this.mapObject
	mapObj.on("movestart",()=>{

		_(this).canBeUser = true
		
	})
	mapObj.on("zoomend",()=>{
		setTimeout(()=>_(this).isAutoZoom = false, 100)
		
		
	})
}

const DEFAULT_LIB_URL = "https://unpkg.com/leaflet@1.5.1/dist/leaflet.js"
const DEFAULT_LIB_CHECK =  "sha512-GffPMF3RvMeYyc1LWMHtK8EbPv0iNZ8/oTtHPx9/cc2ILxQ+u905qIwdpULaqDkyBKgOaB57QTMg7ztg8Jm2Og=="

const DEFAULT_STYLE_URL = "https://unpkg.com/leaflet@1.5.1/dist/leaflet.css"
const DEFAULT_STYLE_CHECK = "sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="

const DEFAULT_TILE_URL = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'
const DEFAULT_TILE_ATTRIBUTION = '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'



// Private values. WeakMap key and value can be GCed if they are not stored anywhere else.
// Acces any private field using _(this).anyOfyourPrivateField
{
	let map = new WeakMap()

	var priv = function(key) {
		map.set(key,{})
	}

	var _ = function(key) {
		return map.get(key)
	}
}