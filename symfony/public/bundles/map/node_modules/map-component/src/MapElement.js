import ComponentsBase from "/node_modules/componentBase/index.js"


/**
 * @abstract
 *
 * @class      MapElement
 * 
 * @classdesc
 * 
 * An abstract class that can be implemented by WebComponent contained in the map.
 * Extending this class is not mandatory but may help.
 */
class MapElement extends ComponentsBase {
	constructor(){
		super()
		priv(this)
	}

	connectedCallback(){
		_(this).mapComponent = findParentMap.call(this)

		connectToMap.call(this,_(this).mapComponent)

		super.connectedCallback()


	}

	/**
	 * The last map component that had contained this element.
	 * 
	 * null if this MapElement never had been added to any MapComponent
	 *
	 * @type     {MapComponent?} 
	 */
	get mapComponent (){
		return _(this).mapComponent
	}

	
}

/**
 * @abstract
 * 
 * @name MapElement#connectToMap
 * 
 * @method     
 *   
 * @description Optional method, if defined will be called once, each time
 *              the component is added to a MapComponent and that this map
 *              component is ready and have finished to load all its add-on.
 *
 * @param       {MapComponent}  mapComponent  The MapComponent this element have been added to.
 */

/**
 * @ignore
 */
var  findParentMap = function() {
	return this.closest("map-component"); 
}

var connectToMap = function(mapComponent) {
	if(!this.connectToMap)
		return

	let elem = this
	var onReady = function onReady(){

		mapComponent.removeEventListener("addons_loaded", onReady)
		elem.connectToMap(mapComponent)

	}
	if(mapComponent.mapReady){
		onReady()
	}
	else
		mapComponent.addEventListener("addons_loaded", onReady)
}


export {MapElement}

// Private values. Weakmap key and value can be GCed if they are not stored anywhere else.
// Acces any private field using _(this).anyOfyourPrivateField
{
	let map = new WeakMap()

	var priv = function(key) {
		map.set(key,{})
	}

	var _ = function(key) {
		return map.get(key)
	}
}
