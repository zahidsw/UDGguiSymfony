
import ComponentsBase from "/node_modules/componentBase/index.js"

/**
 * A web component wrapper for some common map library. 
 * Can be upgraded with an addons system.
 *
 * #### Fires
 *  - *addons_loaded* : The component finished loading and initializing all the add-ons and its own adapter.
 *  
 *  - *map_center* : The map center position was changed
 *  
 *  - *map_drag* :  The map center position was changed by user interaction (and not programmaticaly) through mean provided by the library, 
	  such as by dragging the map
 *  
 *  - *map_dragend* : The map center position have changed by user through mean provided by the library,
 * 	  but the user action causing this change have stopped.
 *  
 *  - *map_dragstart* : The user start interacting with the map in way that change the center position.
 *  
 *  - *map_idle* : The map have become idle after panning or zooming
 *  
 *  - *map_zoom* : The user changed the zoom or the function setZoom is called
 *  
 *  - *map_user_zoom* : The user changed the zoom  by user interaction (and not programmaticaly) through mean provided by the library, 
	  such as by dragging the map
 *   
 * @class      MapComponent
 *
 * @property   {MapComponent~LatLng|Object}  location   A location object.
 *                                                      Either a literal LatLng
 *                                                      or anything else
 *                                                      meaningful for the
 *                                                      adapter. Note that this
 *                                                      object must be
 *                                                      serializable.
 *
 * @property   {number}                      zoom       The amount of zoom of
 *                                                      the map, should be
 *                                                      approximately as [open
 *                                                      street map zoom
 *                                                      levels](https://wiki.openstreetmap.org/wiki/Zoom_levels)
 *
 * @property   {string}                      poweredby  The library actually
 *                                                      running the map. The map
 *                                                      must have an adapter for
 *                                                      this library either in
 *                                                      the default adapters or
 *                                                      among its add-ons.
 *                                                      Setting it through
 *                                                      javascript will start
 *                                                      the initialization
 *                                                      process, including the
 *                                                      loading of declared
 *                                                      add-ons immediately.
 *
 * @property   {string[]}                    addons     A list of path to {@link
 *                                                      MapComponent~Addon}
 *                                                      modules to add to the
 *                                                      map. This attribute can
 *                                                      be set only once.
 */
class MapComponent extends ComponentsBase{
	constructor(){
		super()
		priv(this)
		_(this).enabledAddons = []
		_(this).eventBidges = []
		_(this).mapReady = false
	}

	connectedCallback(){
		if(!this.ready){

			this.addons = this.addons || []
			this.zoom = isNaN(this.zoom)? 14 : this.zoom
			this.location = this.location || {latitude : Math.random()*180-90, longitude : Math.random()*180-90}

			this.setStyle(mapBaseStyle)
			this.setStyle(defaultMapContainerStyle,"mapContainer")
		}
		
		super.connectedCallback()
	}


// ****************************************************************************
// *                                  Publics                                 *
// ****************************************************************************
	
	/**
	 * True if the map and all its add-ons have been loaded and created.
	 *
	 * @type     {Boolean} 
	 */
	get mapReady() {
		return _(this).mapReady
	}

	get adapter(){
		return _(this).adapter
	}
// ****************************************************************************
// *                      ComponentsBase Static Settings                      *
// ****************************************************************************

	static get serialize(){
		return {
			location : "map",
			zoom : "number",
			poweredby : "string",
			addons : "array<string>"
		}
	}
	
	static get shadowMod(){
		return "open"
	}

	
// ****************************************************************************
// *                         Attribute Change Handler                         *
// ****************************************************************************

	onAddons(old,newadon) {

		if(old && old.length) {
			this.setAttribute("errored", "true")
			throw new Error("Map addons can only be set once")
		}

	}

	onPoweredby(old,newpow) {

		if(old && old.length ) {
			this.setAttribute("errored", "true")
			throw new Error("Map engine can only be set once")
		}

		tryInit.call(this)
	}

	onLocation(oldL,newL) {
		

		// Check if different as the adapter may sometime set the location itself
		// In such case, its better not setting back the adapter location.
		if(_(this).adapter ){

			let {latitude,longitude} = _(this).adapter.getCenter()
			if(newL.latitude !== latitude || newL.longitude !== longitude){
				_(this).adapter.setCenter(newL,oldL)
				
			}
		}
			
		this._dispatch("map_center",newL)
	}

	onZoom(oldZ,newZ) {
		// Check if different as the adapter may sometime set the zoom itself
		// In such case, its better not setting back the adapter zoom.
		if( _(this).adapter && _(this).adapter.getZoom() !== newZ){
				_(this).adapter.setZoom(newZ,oldZ)
		}
		
		this._dispatch("zoom",newZ)
	}

	destroy(){
		_(this).eventBidges.forEach(b => {
			_(this).adapter.removeMapEvent(b.eventType,b)
		})
		_(this).eventBidges = []
		_(this).enabledAddons.forEach(a => a.destroy(this[a.nameSpace]))
		_(this).adapter.destroy()
		super.destroy()

	}
}



// ****************************************************************************
// *                              Additional Doc                              *
// ****************************************************************************

/**
 * @typedef    {(MapComponent~AddapterAddon | MapComponent~FeatureAddon)}  MapComponent~Addon
 *
 * Add-on are es6 modules expanding the capability of the map component. The two
 * kind of Add-ons are :
 *  - {@link MapComponent~AddapterAddon} : an add on enabling this component to
 *    use a specific map library.
 *  - {@link MapComponent~FeatureAddon} : an add on expanding the capabilities of the
 *    map.
 *
 * The MapComponent distinguish between the two kind of module by checking if
 * they are exporting a truthy enabling property.
 *
 * A module exporting a truthy enabling property will be used as an
 * AddapterAddon and any other as a FeatureAddon. A module cannot be used as
 * both.
 */



/**
 * @interface  MapComponent~AddapterAddon
 *
 * An es6 module or a name space providing methods and constant to enable the use
 * of a map library for this component. {@link GoogleMapAdapter} is one example
 * of such an Adapter.
 * 
 */
	/**
	 * @name MapComponent~AddapterAddon#enabling 
	 * 
	 * @desc
	 *
	 * A string identifying the adapter. For a given MapComponent, an Adapter
	 * module will only be used if its enabling string match the poweredby
	 * attribute of the component.
	 * 
	 * @type   {string}   
	 *  
	 * 
	 * @readonly
	 *
	 */
	/**
	 * @name       MapComponent~AddapterAddon#createAdapter
	 *
	 * @function  
	 * @desc 
	 * Create a new instance of {@link MapAdapter} for the given
	 * MapComponent
	 *
	 * @param      {MapComponent}                 mapComponent    The map
	 *                                                            component
	 *                                                            needing a new
	 *                                                            adapter.
	 *
	 * @param      {MapComponent~FeatureAddon[]}  featureModules  The feature
	 *                                                            add-on module
	 *                                                            the the map will
	 *                                                            use. At this
	 *                                                            point those
	 *                                                            add-on should
	 *                                                            not yet be
	 *                                                            installed on the
	 *                                                            map.
	 *                                                            
	 * @return     {MapAdapter}                   A new MapAdapter
	 */
	/**
	 *
	 * @async
	 * @method      MapComponent~AddapterAddon#createMap
	 * 
	 * 
	 * @description Create an object representing the map on js side in this
	 *              adapter logic. Should also create an actual map UI in the
	 *              shadow dom of the given map component.
	 *
	 * Eventual external dependencies are expected to be loaded during this
	 * method call. The featureModules allow the module do decided to load some
	 * additional library, or detect unsupported features.
	 * 
	 * Map component define by default the following inner style rule : 
	 * 
	 * ```css
	 * #mapContainer {
	 *		display:block;
	 *		height:100%;
	 *		width:100%;
	 *	}
	 * ```
	 * 
	 * This rule is meant to be used by the top level element of the map solution
	 *  to have proper dimension inside the map-component.
	 *
	 * @param       {MapComponent}                 mapComponent    The map
	 *                                                             component
	 *                                                             needing a new
	 *                                                             adapter.
	 *
	 * @param       {MapAdapter}                   mapAdapter      an instance of
	 *                                                             MapAdapter
	 *                                                             created by
	 *                                                             this same
	 *                                                             module for the
	 *                                                             give
	 *                                                             MapComponent.
	 *
	 * @param       {MapComponent~FeatureAddon[]}  featureModules  The feature
	 *                                                             add-on module
	 *                                                             the the map
	 *                                                             will use. At
	 *                                                             this point
	 *                                                             those add-on
	 *                                                             should not yet
	 *                                                             be installed
	 *                                                             on the map.
	 *
	 * @return      {MapObject}                    Something representing the map
	 *                                             on the js side in the logic of
	 *                                             the adapted library.
	 */


/**
 * @interface  MapComponent~FeatureAddon
 *
 * An es6 module or a name space providing methods and constant to enable the use
 * of a map library for this component. {@link GoogleMapAdapter} is one example
 * of such an Adapter.
 * 
 */

	/**
	 * @name        MapComponent~FeatureAddon#nameSpace
	 * @description the name of the module, also the name of the MapComponent
	 *              attribute that will bear the extension of the module. 
	 *              If this module is iteself an extension of an other module. 
	 *               
	 * @type        {string}
	 */

	/**
	 * @method     MapComponent~FeatureAddon#create
	 *
	 * @param      {MapAdapter}                            adapter       The map
	 *                                                                   adapter
	 *                                                                   used to
	 *                                                                   display the
	 *                                                                   map.
	 * @param      {MapComponent}                          mapComponent  The
	 *                                                                   MapComponent
	 *                                                                   to add
	 *                                                                   features
	 *                                                                   to.
	 * @param      {MapObject}                             mapObject     The map
	 *                                                                   object
	 *                                                                   returned by
	 *                                                                   the
	 *                                                                   MapAdapter.
	 *
	 * @return     {MapComponent~FeatureAddon~Extension}  an extension object that
	 *                                                     will be added in the
	 *                                                     attribute of the map with
	 *                                                     the same name as this
	 *                                                     nameSpace.
	 *
	 * @desc
	 * Add new behaviors to a MapComponent may also return an object containing
	 * methods interacting with the said map.
	 */
	/**
	 * @method     MapComponent~FeatureAddon#destroy
	 *
	 * @param      {MapComponent~FeatureAddon~Extension}  extension  The extension
	 *                                                                object this
	 *                                                                module created
	 *                                                                for this map.
	 *
	 * Called when the destroy method is called. Should clear thing so that this
	 * module won't prevent the map or any of its component to be garbage collected
	 * or anything else created by this module and that could disturb the en of the
	 * life cycle of the map.
	 * 
	 * Calling this method may cause the FeatureAddon to not work properly anymore.
	 */

	/**
	 * @typedef    {Object}  MapComponent~FeatureAddon~Extension
	 *
	 * An object containing methods and properties bound to a certain MapComponent.
	 * {@link MapComponent~FeatureAddon} providing new methods to the map should use
	 * such an object instead of directly adding thing in the MapMapComponent or in
	 * its prototype.
	 * 
	 */



/**
 * @typedef {object} MapComponent~LatLng
 * 
 * An object describing a position on a sphere.
 * 
 * @prop {number} latitude Latitude in decimal degree.
 * @prop {number} longitude Longitude in decimal degree.
 */
/**
 * @typedef {object} MapComponent~PxCoord
 * 
 * An object describing a position on the screen inside a MapComponent
 * 
 * @prop {number} x Distance to the left in css pixel
 * @prop {number} y Distance to the top in css pixel.
 */

// ****************************************************************************
// *                                 Privates                                 *
// ****************************************************************************


var tryInit = async function(){


	if(!_(this).adapter) {

		let engine = this.poweredby
		let add_ons = this.addons

		if(!engine)
			return 

		let addons = await Promise.all(add_ons.map(
			s => 
				import(s).catch(
					e=>{
						console.error("Failed to load add-on "+s+", reason : ")
						console.error(e)
					}	
				)
		))

		await selectAdapter.call(this, addons, engine)

		let addonsPromises = []
		addons.filter(a => a && !a.enabling)
			.forEach(async (a) => {
				try{
					let nameSpace = a.create(_(this).adapter,this,_(this).map)

					if(nameSpace instanceof Promise){
						
						let p = nameSpace.catch(e => {
							console.error("Failed to create feature add-on "+a.nameSpace+". Caused by :" )
							console.error(e)
						})
						
						addonsPromises.push(nameSpace)

						nameSpace = await nameSpace
					}

					_(this).enabledAddons.push(a)

					this[a.nameSpace] = nameSpace

				}catch(e){
					console.error(e)
				}
		})
		
		await Promise.all(addonsPromises)

		this._dispatch("addons_loaded")
		_(this).mapReady = true
	}
}

var tryInitAdapterAlone = async function(engine,addons) {

}

var selectAdapter = async function(addons,engineName) {
	let adapter = addons.find(a => a.enabling === engineName)
	let features = addons.filter(a => !a.enabling)
	if(!adapter)
		adapter = defaultAdapters[engineName]
	
	if(!adapter)
		throw new Error("no default or add on adapter for map library "+engineName)
	
	_(this).adapter = adapter.createAdapter(this,features)

	_(this).map = await adapter.createMap(_(this).adapter, this,addons,features)

	bridgedEvents.forEach(bridgeEvent.bind(this))
	
	syncBackMapAttributes.call(this)

}



var bridgeEvent = function(evtName) {
	try {
		let bridge = createEventBridge.call(this,evtName)

		_(this).adapter.addMapEvent(evtName,createEventBridge.call(this,evtName))

		_(this).eventBidges.push(bridge)
	}catch(e){
		console.error(e)
	}
}

var createEventBridge = function(name) {
	let bridge = bridgeEventHandler.bind({eventTarget:this,eventType:name})

	bridge.eventType = name

	return bridge
}

var bridgeEventHandler = function(evt) {
	let cp = new CustomEvent(this.eventType)
	
	this.eventTarget.dispatchEvent(cp)
}

var syncBackMapAttributes = function() {
	this.addEventListener("map_zoom",handleMapZoom)
	this.addEventListener("map_drag",handleMapDrag)
	this.addEventListener("map_idle",handleMapDrag)
}

var handleMapDrag = function (evt) {
	let that = evt.target
	that.location = _(that).adapter.getCenter()
}
var handleMapZoom = function (evt) {
	let that = evt.target
	that.zoom = _(that).adapter.getZoom()
}

const mapBaseStyle  = `
	:host{
		display:block;
	}
`

const defaultMapContainerStyle = `
	
	#mapContainer{
		display:block;
		height:100%;
		width:100%;
	}

`
import * as googleAdapter from "./GoogleMapAdapter.js"

import * as leafletAdapter from "./LeafletAdapter.js"

var defaultAdapters = {google:googleAdapter, leaflet: leafletAdapter}

const bridgedEvents = [
	"map_drag",
	"map_dragend",
	"map_dragstart",
	"map_idle",
	"map_zoom",
	"map_user_zoom"
]






// Private values. Weakmap key and value can be GCed if they are not stored anywhere else.
// Acces any private field using _(this).anyOfyourPrivateField
{
	let map = new WeakMap()

	var priv = function(key) {
		map.set(key,{})
	}

	var _ = function(key) {
		return map.get(key)
	}
}


export default MapComponent